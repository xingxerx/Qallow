name: Qallow Internal CI

on:
  push:
    branches:
      - main
      - develop
      - release/**
  pull_request:

jobs:
  build-and-test:
    name: Build and Accelerator Smoke
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          # Remove unnecessary files to free up space
          sudo rm -rf /usr/local/lib/android || true
          sudo rm -rf /usr/share/dotnet || true
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /opt/hostedtoolcache || true
          df -h

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            build-essential \
            gcc \
            g++ \
            make \
            git \
            software-properties-common \
            wget \
            curl
          # Add deadsnakes PPA for Python 3.13
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            python3.13 \
            python3.13-venv \
            python3.13-dev \
            python3.13-distutils \
            python3-pip
          # Set python3 to point to python3.13
          sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.13 1
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*

      - name: Install Python packages
        run: |
          python3 -m pip install --upgrade pip setuptools wheel --no-cache-dir
          # Install sentence-transformers with error handling (optional for CI)
          python3 -m pip install sentence-transformers --no-cache-dir || echo "Warning: sentence-transformers installation failed, continuing without it"

      - name: Install CUDA toolkit
        continue-on-error: true
        run: |
          # Download and install CUDA 13.0 toolkit (optional for CPU builds)
          echo "Attempting to install CUDA 13.0 toolkit..."
          wget -q https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb || {
            echo "Warning: Failed to download CUDA keyring, skipping CUDA installation"
            exit 0
          }
          sudo dpkg -i cuda-keyring_1.1-1_all.deb || true
          sudo apt-get update || true
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            cuda-toolkit-13-0 \
            cuda-nsight-compute-13-0 || {
            echo "Warning: CUDA installation failed, continuing without it"
            exit 0
          }
          # Add CUDA to PATH
          echo "/usr/local/cuda-13.0/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=/usr/local/cuda-13.0/lib64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          sudo apt-get clean || true
          sudo rm -rf /var/lib/apt/lists/* || true

      - name: Build CPU binary
        run: make ACCELERATOR=CPU -j"$(nproc)" -B

      - name: Verify binary exists
        run: |
          if [ ! -f build/CPU/qallow_unified_cpu ]; then
            echo "ERROR: Binary not found at build/CPU/qallow_unified_cpu"
            ls -la build/CPU/ || echo "build/CPU directory does not exist"
            exit 1
          fi
          echo "Binary verified: $(file build/CPU/qallow_unified_cpu)"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          bash tests/smoke/test_modules.sh || {
            echo "Smoke tests failed"
            exit 1
          }

      - name: Accelerator execution
        env:
          QALLOW_QUIET: "1"
        run: |
          echo "{}" > /tmp/accelerator_input.json
          ./build/CPU/qallow_unified_cpu run --accelerator --file=/tmp/accelerator_input.json --no-watch --threads=2 --quiet

      - name: Clean up build artifacts
        if: always()
        run: |
          rm -rf build/
          df -h

      - name: Dependency report
        continue-on-error: true
        run: scripts/check_dependencies.sh
