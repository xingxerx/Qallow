#!/bin/bash
# Qallow Unified Command Interface for Linux
# One command to rule them all: build, run, test, and manage the Qallow VM

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Print banner
print_banner() {
    echo -e "${CYAN}"
    echo "╔════════════════════════════════════════╗"
    echo "║          QALLOW - Unified VM           ║"
    echo "║    Photonic & Quantum Emulation        ║"
    echo "╚════════════════════════════════════════╝"
    echo -e "${NC}"
}

# Show help
show_help() {
    print_banner
    echo "Usage: ./qallow [command] [options]"
    echo ""
    echo -e "${YELLOW}Build Commands:${NC}"
    echo "  build                Build unified qallow_unified binary"
    echo "  build-phase13        Build standalone phase13 test (qallow_phase13)"
    echo "  build-all            Build everything (unified + standalone)"
    echo ""
    echo -e "${YELLOW}Run Commands:${NC}"
    echo "  run                  Run unified VM"
    echo "  phase12              Run Phase 12 elasticity simulation"
    echo "  phase13              Run Phase 13 harmonic propagation"
    echo "  phase13-test         Run standalone Phase 13 test (8 threads)"
    echo ""
    echo -e "${YELLOW}Management Commands:${NC}"
    echo "  bench                Run benchmark"
    echo "  govern               Run governance audit"
    echo "  verify               Verify system health"
    echo "  live                 Start live interface"
    echo "  status               Show system status"
    echo ""
    echo -e "${YELLOW}Bend Integration:${NC}"
    echo "  bend12               Run Bend Phase 12 via IPC"
    echo "  bend13               Run Bend Phase 13 via IPC"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  ./qallow build                              # Build unified system"
    echo "  ./qallow build-phase13                      # Build standalone Phase 13"
    echo "  ./qallow run                                # Run unified VM"
    echo "  ./qallow phase13 --nodes=16 --ticks=500    # Run Phase 13"
    echo "  ./qallow phase13-test                       # Quick Phase 13 test"
    echo "  ./qallow bench                              # Run benchmark"
    echo ""
}

# Build unified system
build_unified() {
    echo -e "${BLUE}[BUILD] Building unified Qallow system...${NC}"
    ./build.sh
    echo -e "${GREEN}[BUILD] Unified system built successfully!${NC}"
    echo ""
    echo "Binary: build/qallow_unified"
    echo "Run with: ./qallow run"
}

# Build standalone Phase 13 test
build_phase13() {
    echo -e "${BLUE}[BUILD] Building standalone Phase 13 test...${NC}"
    gcc -O3 -march=native -flto -pthread \
        src/qallow_phase13.c \
        -o build/qallow_phase13
    echo -e "${GREEN}[BUILD] Phase 13 test built successfully!${NC}"
    echo ""
    echo "Binary: build/qallow_phase13"
    echo "Run with: ./qallow phase13-test"
}

# Build all
build_all() {
    echo -e "${BLUE}[BUILD] Building all Qallow components...${NC}"
    echo ""
    build_unified
    echo ""
    build_phase13
    echo ""
    echo -e "${GREEN}[BUILD] All components built successfully!${NC}"
}

# Show system status
show_status() {
    print_banner
    echo -e "${YELLOW}System Status:${NC}"
    echo ""
    
    # Check for binaries
    echo -e "${CYAN}Binaries:${NC}"
    if [ -f "build/qallow_unified" ]; then
        echo -e "  ${GREEN}✓${NC} qallow_unified   ($(stat -c%s build/qallow_unified | numfmt --to=iec-i --suffix=B))"
    else
        echo -e "  ${RED}✗${NC} qallow_unified   (not built)"
    fi
    
    if [ -f "build/qallow_phase13" ]; then
        echo -e "  ${GREEN}✓${NC} qallow_phase13  ($(stat -c%s build/qallow_phase13 | numfmt --to=iec-i --suffix=B))"
    else
        echo -e "  ${RED}✗${NC} qallow_phase13  (not built)"
    fi
    echo ""
    
    # Check for compilers
    echo -e "${CYAN}Toolchain:${NC}"
    if command -v gcc &> /dev/null; then
        echo -e "  ${GREEN}✓${NC} GCC $(gcc --version | head -n1 | awk '{print $3}')"
    else
        echo -e "  ${RED}✗${NC} GCC (not found)"
    fi
    
    if command -v nvcc &> /dev/null; then
        echo -e "  ${GREEN}✓${NC} NVCC $(nvcc --version | grep release | awk '{print $5}' | tr -d ',')"
    else
        echo -e "  ${YELLOW}⚠${NC} NVCC (not found - CPU only mode)"
    fi
    echo ""
    
    # Check for recent logs
    echo -e "${CYAN}Recent Logs:${NC}"
    for log in log_phase*.csv phase*.csv qallow*.csv; do
        if [ -f "$log" ]; then
            echo -e "  ${GREEN}•${NC} $log ($(stat -c%s "$log" | numfmt --to=iec-i --suffix=B))"
        fi
    done | head -5
    echo ""
}

# Run standalone Phase 13 test
run_phase13_test() {
    if [ ! -f "build/qallow_phase13" ]; then
        echo -e "${YELLOW}[INFO] Phase 13 test not built, building now...${NC}"
        build_phase13
    fi
    
    echo -e "${BLUE}[RUN] Running Phase 13 standalone test...${NC}"
    echo ""
    ./build/qallow_phase13
    echo ""
    echo -e "${GREEN}[DONE] Phase 13 test completed${NC}"
}

# Main command dispatcher
COMMAND="${1:-help}"

case "$COMMAND" in
    # Build commands
    build)
        build_unified
        ;;
    build-phase13)
        build_phase13
        ;;
    build-all)
        build_all
        ;;
    
    # Run commands
    run)
        if [ ! -f "build/qallow_unified" ]; then
            echo -e "${YELLOW}[INFO] Binary not found, building...${NC}"
            build_unified
        fi
        ./build/qallow_unified run "${@:2}"
        ;;
    
    phase12)
        if [ ! -f "build/qallow_unified" ]; then
            echo -e "${YELLOW}[INFO] Binary not found, building...${NC}"
            build_unified
        fi
        ./build/qallow_unified phase12 "${@:2}"
        ;;
    
    phase13)
        if [ ! -f "build/qallow_unified" ]; then
            echo -e "${YELLOW}[INFO] Binary not found, building...${NC}"
            build_unified
        fi
        ./build/qallow_unified phase13 "${@:2}"
        ;;
    
    phase13-test)
        run_phase13_test
        ;;
    
    # Management commands
    bench|benchmark)
        if [ ! -f "build/qallow_unified" ]; then
            echo -e "${YELLOW}[INFO] Binary not found, building...${NC}"
            build_unified
        fi
        ./build/qallow_unified bench "${@:2}"
        ;;
    
    govern)
        if [ ! -f "build/qallow_unified" ]; then
            echo -e "${YELLOW}[INFO] Binary not found, building...${NC}"
            build_unified
        fi
        ./build/qallow_unified govern "${@:2}"
        ;;
    
    verify)
        if [ ! -f "build/qallow_unified" ]; then
            echo -e "${YELLOW}[INFO] Binary not found, building...${NC}"
            build_unified
        fi
        ./build/qallow_unified verify "${@:2}"
        ;;
    
    live)
        if [ ! -f "build/qallow_unified" ]; then
            echo -e "${YELLOW}[INFO] Binary not found, building...${NC}"
            build_unified
        fi
        ./build/qallow_unified live "${@:2}"
        ;;
    
    status)
        show_status
        ;;
    
    # Bend integration
    bend12)
        if [ ! -f "build/qallow_unified" ]; then
            echo -e "${YELLOW}[INFO] Binary not found, building...${NC}"
            build_unified
        fi
        ./build/qallow_unified bend12 "${@:2}"
        ;;
    
    bend13)
        if [ ! -f "build/qallow_unified" ]; then
            echo -e "${YELLOW}[INFO] Binary not found, building...${NC}"
            build_unified
        fi
        ./build/qallow_unified bend13 "${@:2}"
        ;;
    
    # Help
    help|-h|--help)
        show_help
        ;;
    
    *)
        echo -e "${RED}[ERROR] Unknown command: $COMMAND${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
