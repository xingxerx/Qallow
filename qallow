#!/bin/bash
# Qallow Unified Command Interface
# Handles all Phase IV operations

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Directories
CPU_DIR="backend/cpu"
CUDA_DIR="backend/cuda"
INC_DIR="core/include"
BUILD_DIR="build"
OUTPUT="qallow_phase4"

show_help() {
    echo -e "${BLUE}Qallow Phase IV - Unified Command Interface${NC}"
    echo ""
    echo "Usage: ./qallow <command>"
    echo ""
    echo "Commands:"
    echo "  build      Build both CPU + CUDA"
    echo "  run        Execute unified runtime"
    echo "  bench      Run HITL benchmark"
    echo "  govern     Run autonomous governance audit"
    echo "  visual     Open live dashboard"
    echo "  clean      Remove build artifacts"
    echo "  help       Show this help"
    echo ""
}

cmd_build() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}Building Qallow Phase IV${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
    
    # Check for CUDA
    if ! command -v nvcc &> /dev/null; then
        echo -e "${RED}Error: nvcc not found${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}[INFO]${NC} CUDA: $(nvcc --version | grep release | awk '{print $5}' | tr -d ',')"
    echo -e "${GREEN}[INFO]${NC} GCC: $(gcc --version | head -n1 | awk '{print $3}')"
    echo ""
    
    # Create build directory
    mkdir -p $BUILD_DIR
    
    # Check source files
    if [ ! -f "$CPU_DIR/qallow_kernel.c" ]; then
        echo -e "${RED}Error: Source files not found in $CPU_DIR${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}[1/3] Compiling CPU modules...${NC}"
    for src in $CPU_DIR/*.c; do
        if [ -f "$src" ]; then
            obj="$BUILD_DIR/$(basename $src .c).o"
            echo -e "${GREEN}  →${NC} $(basename $src)"
            gcc -O2 -Wall -I$INC_DIR -DCUDA_ENABLED=1 -c "$src" -o "$obj" || exit 1
        fi
    done
    
    echo ""
    echo -e "${BLUE}[2/3] Compiling CUDA kernels...${NC}"
    for src in $CUDA_DIR/*.cu; do
        if [ -f "$src" ]; then
            obj="$BUILD_DIR/$(basename $src .cu)_cu.o"
            echo -e "${GREEN}  →${NC} $(basename $src)"
            nvcc -O2 -arch=sm_89 -I$INC_DIR -DCUDA_ENABLED=1 -c "$src" -o "$obj" || exit 1
        fi
    done
    
    # Compile demo if it exists
    if [ -f "phase4_demo.c" ]; then
        echo ""
        echo -e "${YELLOW}[DEMO]${NC} Compiling phase4_demo.c..."
        gcc -O2 -Wall -I$INC_DIR -DCUDA_ENABLED=1 -c "phase4_demo.c" -o "$BUILD_DIR/phase4_demo.o" || exit 1
    fi
    
    echo ""
    echo -e "${BLUE}[3/3] Linking...${NC}"
    OBJ_FILES=$(find $BUILD_DIR -name "*.o")
    nvcc -o $OUTPUT $OBJ_FILES -lcurand -lm || exit 1
    
    echo ""
    echo -e "${GREEN}================================${NC}"
    echo -e "${GREEN}BUILD SUCCESSFUL${NC}"
    echo -e "${GREEN}================================${NC}"
    echo ""
    echo -e "Executable: ${YELLOW}$OUTPUT${NC}"
    echo ""
}

cmd_run() {
    if [ ! -f "$OUTPUT" ]; then
        echo -e "${RED}Error: $OUTPUT not found. Run './qallow build' first.${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}Running Qallow Phase IV...${NC}"
    echo ""
    ./$OUTPUT "$@"
}

cmd_bench() {
    echo -e "${YELLOW}HITL Benchmark not yet implemented${NC}"
    echo "TODO: Run human-in-the-loop benchmark"
}

cmd_govern() {
    echo -e "${YELLOW}Governance audit not yet implemented${NC}"
    echo "TODO: Run autonomous governance check"
}

cmd_visual() {
    echo -e "${YELLOW}Visual dashboard not yet implemented${NC}"
    echo "TODO: Launch ImGui/matplotlib dashboard"
}

cmd_clean() {
    echo -e "${YELLOW}Cleaning build artifacts...${NC}"
    rm -rf $BUILD_DIR
    rm -f $OUTPUT
    rm -f *.csv *.txt
    echo -e "${GREEN}Clean complete.${NC}"
}

# Main command dispatcher
case "$1" in
    build)
        cmd_build
        ;;
    run)
        shift
        cmd_run "$@"
        ;;
    bench)
        cmd_bench
        ;;
    govern)
        cmd_govern
        ;;
    visual)
        cmd_visual
        ;;
    clean)
        cmd_clean
        ;;
    help|--help|-h|"")
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
